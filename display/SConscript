Import('env')
displayenv = env.Copy()
displayenv.AppendUnique(CPPPATH=['#/libddmanager'])
displayenv.AppendUnique(CPPDEFINES=['DISPLAY_EXPORTS'])
display_sources = Split("""
	display.cpp
	displayhelpers.c""")

if 'darwin' == displayenv['PLATFORM']:
	display_libs = ['tiff', 'z']
	displayenv.AppendUnique(CPPDEFINES=['AQSIS_NO_FLTK'])

if 'win32' == displayenv['PLATFORM']:
	display_libs = ['ws2_32', 'gdi32', 'ole32', 'shell32', 'comctl32', 'fltk']

displayenv.AppendUnique(LIBS = ['$tiff_lib', '$z_lib', display_libs])

display = displayenv.SharedLibrary('display', display_sources)

displayenv.Install('$BINDIR', display)

# Generate and install the 'displays.ini' configuration file from the template 'displays.ini.in'
def build_function(target, source, env):
	# Code to build "target" from "source"
	for x in target:
		print str(x)
	displaylib = displayenv.subst('$SHLIBPREFIX') + 'display' + displayenv.subst('$SHLIBSUFFIX')
	defines = {
		"displaylib": displaylib,
	    }

	for a_target, a_source in zip(target, source):
		display_ini = file(str(a_target), "w")
		display_ini_in = file(str(a_source), "r")
		display_ini.write(display_ini_in.read() % defines)
		display_ini_in.close()
		display_ini.close()

displays_ini = displayenv.Command('displays.ini', 'displays.ini.in', build_function)
displayenv.Install('$BINDIR', displays_ini)
