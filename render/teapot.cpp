// Aqsis
// Copyright © 1997 - 2001, Paul C. Gregory
//
// Contact: pgregory@aqsis.com
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA



/** \file
		\brief Implements RiGeometry "teapot" option.
		\author T. Burge (tburge@affine.org)
*/
/*    References:
 *          [CROW87]  Crow, F. C. The Origins of the Teapot. 
 *                    IEEE Computer Graphics and Applications, 
 *                    pp. 8-19, Vol 7 No 1, 1987.
 *          [PIXA89]  Pixar, The RenderMan Interface, Version 3.1, 
 *                    Richmond, CA, September 1989.  
 *
 */

#include	<math.h>

#include	"aqsis.h"
#include	"teapot.h"
#include	"micropolygon.h"
#include	"imagebuffer.h"
#include	"patch.h"

#include	"ri.h"

START_NAMESPACE(Aqsis)



//---------------------------------------------------------------------
/** Constructor.
 */

CqTeapot::CqTeapot(TqBool addCrowBase) :
	m_CrowBase(addCrowBase)
{
}


//---------------------------------------------------------------------
/** Assignment operator.
 */

CqTeapot&	CqTeapot::operator=(const CqTeapot& From)
{
	CqTeapot::operator=(From);
	m_CrowBase=From.m_CrowBase;
	m_matTx=From.m_matTx;
	m_matITTx=From.m_matITTx;

	return(*this);
}

//---------------------------------------------------------------------
/** Transform the quadric primitive by the specified matrix.
 */

void	CqTeapot::Transform(const CqMatrix& matTx, const CqMatrix& matITTx, const CqMatrix& matRTx)
{
	m_matTx*=matTx;
	m_matITTx*=m_matITTx;
}


//---------------------------------------------------------------------
/** Dice the quadric into a grid of MPGs for rendering.
 */

CqMicroPolyGridBase* CqTeapot::Dice()
{
	CqBasicError(0,Severity_Normal,"Teapot Dice() called.");

	return NULL;
}


//---------------------------------------------------------------------
/** Determine whether the quadric is suitable for dicing.
 */

TqBool	CqTeapot::Diceable()
{
	return(TqFalse);
}

//---------------------------------------------------------------------
/** Get the geometric bound of this GPrim.
 */

CqBound	CqTeapot::Bound() const
{
	CqVector3D vecMin( -3.000, -2.0, 0.0 );
	CqVector3D vecMax(  3.525,  2.0, (m_CrowBase ? 3.15 : 3.15-0.15 /* remove bottom */) );

	CqBound	B(vecMin, vecMax);
	B.Transform(m_matTx);
	return(B);
}


//---------------------------------------------------------------------
/** Split this GPrim into bicubic patches. 
 */

TqInt CqTeapot::Split(std::vector<CqBasicSurface*>& aSplits)
{
	CqSurfacePatchBicubic* pNew;
	int      i,j,s,t;
    RtFloat  bottomheight;
    int      nSurfaces;

    if (m_CrowBase)
	{
		nSurfaces = 32;
		bottomheight = 0.0;
	}
	else
	{
		nSurfaces = 28;
		bottomheight = 0.15;
	}

    /* print out patches */
    for (i=0;i<nSurfaces;i++)
    {

		pNew = new CqSurfacePatchBicubic();

		pNew->SetDefaultPrimitiveVariables();
		pNew->SetSurfaceParameters(*this);
		pNew->P().SetSize(16);
		pNew->m_fDiceable=TqTrue;
		pNew->m_EyeSplitCount=m_EyeSplitCount;

		j = i*16;
		for (s=0;s<4;s++)
		/* Pixar's built-in teapot would be this loop: 
		 *    for (t=3;t>-1;t--)
		 * but this makes a teapot with normals pointing in-ward
		 * which can be proven by doing a "sides 1" with their 
		 * geometry "teapot" statement and see the teapot ripped
		 * apart.
		 */
		/* Creating a normal teapot with the following loop:
		 *    for (t=0;t<4;t++)
		 * which has the normals pointing outward.
		 */

		/* Choose to match PRMan 3.9 since this is gprim was added to do just 
		 * that with some of their example RIB files. 
		 */
		for (t=3;t>-1;t--) 
		{
			pNew->CP(s,t)=CqVector4D( m_aptTeapot[m_Teapot[j + s*4+t]].x(),
									m_aptTeapot[m_Teapot[j + s*4+t]].y(),
									m_aptTeapot[m_Teapot[j + s*4+t]].z() - bottomheight,
									1);
		}

		pNew->Transform(m_matTx, m_matITTx, CqMatrix());

		aSplits.push_back(pNew);
	}
	
	/* Number of surfaces is either 28 or 32 depending on if the bottom was added. */
	return nSurfaces;
}

//---------------------------------------------------------------------
/** CV data and lookup table.
 */
CqVector3D CqTeapot::m_aptTeapot[306] = { 
   /*   0 */ (     1.4,      0.0,      2.4 ),
   /*   1 */ (     1.4,   -0.784,      2.4 ),
   /*   2 */ (   0.784,     -1.4,      2.4 ),
   /*   3 */ (     0.0,     -1.4,      2.4 ),   
   /*   4 */ (  1.3375,      0.0,  2.53125 ),
   /*   5 */ (  1.3375,   -0.749,  2.53125 ),
   /*   6 */ (   0.749,  -1.3375,  2.53125 ),
   /*   7 */ (     0.0,  -1.3375,  2.53125 ),   
   /*   8 */ (  1.4375,      0.0,  2.53125 ),
   /*   9 */ (  1.4375,   -0.805,  2.53125 ),
   /*  10 */ (   0.805,  -1.4375,  2.53125 ),
   /*  11 */ (     0.0,  -1.4375,  2.53125 ),
   /*  12 */ (     1.5,      0.0,      2.4 ),
   /*  13 */ (     1.5,    -0.84,      2.4 ),
   /*  14 */ (    0.84,     -1.5,      2.4 ),
   /*  15 */ (     0.0,     -1.5,      2.4 ),   
   /*  16 */ (  -0.784,     -1.4,      2.4 ),
   /*  17 */ (    -1.4,   -0.784,      2.4 ),
   /*  18 */ (    -1.4,      0.0,      2.4 ),
   /*  19 */ (  -0.749,  -1.3375,  2.53125 ),   
   /*  20 */ ( -1.3375,   -0.749,  2.53125 ),
   /*  21 */ ( -1.3375,      0.0,  2.53125 ),
   /*  22 */ (  -0.805,  -1.4375,  2.53125 ),
   /*  23 */ ( -1.4375,   -0.805,  2.53125 ),
   /*  24 */ ( -1.4375,      0.0,  2.53125 ),
   /*  25 */ (   -0.84,     -1.5,      2.4 ),
   /*  26 */ (    -1.5,    -0.84,      2.4 ),
   /*  27 */ (    -1.5,      0.0,      2.4 ),
   /*  28 */ (    -1.4,    0.784,      2.4 ),
   /*  29 */ (  -0.784,      1.4,      2.4 ),
   /*  30 */ (     0.0,      1.4,      2.4 ),
   /*  31 */ ( -1.3375,    0.749,  2.53125 ),
   /*  32 */ (  -0.749,   1.3375,  2.53125 ),
   /*  33 */ (     0.0,   1.3375,  2.53125 ), 
   /*  34 */ ( -1.4375,    0.805,  2.53125 ),
   /*  35 */ (  -0.805,   1.4375,  2.53125 ),
   /*  36 */ (     0.0,   1.4375,  2.53125 ),
   /*  37 */ (    -1.5,     0.84,      2.4 ),
   /*  38 */ (   -0.84,      1.5,      2.4 ),
   /*  39 */ (     0.0,      1.5,      2.4 ),
   /*  40 */ (   0.784,      1.4,      2.4 ),
   /*  41 */ (     1.4,    0.784,      2.4 ),
   /*  42 */ (   0.749,   1.3375,  2.53125 ),
   /*  43 */ (  1.3375,    0.749,  2.53125 ), 
   /*  44 */ (   0.805,   1.4375,  2.53125 ),
   /*  45 */ (  1.4375,    0.805,  2.53125 ),
   /*  46 */ (    0.84,      1.5,      2.4 ),
   /*  47 */ (     1.5,     0.84,      2.4 ),
   /*  48 */ (    1.75,      0.0,    1.875 ),
   /*  49 */ (    1.75,    -0.98,    1.875 ),
   /*  50 */ (    0.98,    -1.75,    1.875 ),
   /*  51 */ (     0.0,    -1.75,    1.875 ),
   /*  52 */ (     2.0,      0.0,     1.35 ),
   /*  53 */ (     2.0,    -1.12,     1.35 ),
   /*  54 */ (    1.12,     -2.0,     1.35 ),
   /*  55 */ (     0.0,     -2.0,     1.35 ),
   /*  56 */ (     2.0,      0.0,      0.9 ),
   /*  57 */ (     2.0,    -1.12,      0.9 ),
   /*  58 */ (    1.12,     -2.0,      0.9 ),
   /*  59 */ (     0.0,     -2.0,      0.9 ),
   /*  60 */ (   -0.98,    -1.75,    1.875 ),
   /*  61 */ (   -1.75,    -0.98,    1.875 ),
   /*  62 */ (   -1.75,      0.0,    1.875 ),
   /*  63 */ (   -1.12,     -2.0,     1.35 ),
   /*  64 */ (    -2.0,    -1.12,     1.35 ),
   /*  65 */ (    -2.0,      0.0,     1.35 ),
   /*  66 */ (   -1.12,     -2.0,      0.9 ),
   /*  67 */ (    -2.0,    -1.12,      0.9 ),
   /*  68 */ (    -2.0,      0.0,      0.9 ),
   /*  69 */ (   -1.75,     0.98,    1.875 ),
   /*  70 */ (   -0.98,     1.75,    1.875 ),
   /*  71 */ (     0.0,     1.75,    1.875 ),
   /*  72 */ (    -2.0,     1.12,     1.35 ),
   /*  73 */ (   -1.12,      2.0,     1.35 ),
   /*  74 */ (     0.0,      2.0,     1.35 ),
   /*  75 */ (    -2.0,     1.12,      0.9 ),
   /*  76 */ (   -1.12,      2.0,      0.9 ),
   /*  77 */ (     0.0,      2.0,      0.9 ),
   /*  78 */ (    0.98,     1.75,    1.875 ),
   /*  79 */ (    1.75,     0.98,    1.875 ),
   /*  80 */ (    1.12,      2.0,     1.35 ),
   /*  81 */ (     2.0,     1.12,     1.35 ),
   /*  82 */ (    1.12,      2.0,      0.9 ),
   /*  83 */ (     2.0,     1.12,      0.9 ),
   /*  84 */ (     2.0,      0.0,     0.45 ),
   /*  85 */ (     2.0,    -1.12,     0.45 ),
   /*  86 */ (    1.12,     -2.0,     0.45 ),
   /*  87 */ (     0.0,     -2.0,     0.45 ),
   /*  88 */ (     1.5,      0.0,    0.225 ),
   /*  89 */ (     1.5,    -0.84,    0.225 ),
   /*  90 */ (    0.84,     -1.5,    0.225 ),
   /*  91 */ (     0.0,     -1.5,    0.225 ),
   /*  92 */ (     1.5,      0.0,     0.15 ),
   /*  93 */ (     1.5,    -0.84,     0.15 ),
   /*  94 */ (    0.84,     -1.5,     0.15 ),
   /*  95 */ (     0.0,     -1.5,     0.15 ),
   /*  96 */ (   -1.12,     -2.0,     0.45 ),
   /*  97 */ (    -2.0,    -1.12,     0.45 ),
   /*  98 */ (    -2.0,      0.0,     0.45 ),
   /*  99 */ (   -0.84,     -1.5,    0.225 ),
   /* 100 */ (    -1.5,    -0.84,    0.225 ),
   /* 101 */ (    -1.5,      0.0,    0.225 ),
   /* 102 */ (   -0.84,     -1.5,     0.15 ),
   /* 103 */ (    -1.5,    -0.84,     0.15 ),
   /* 104 */ (    -1.5,      0.0,     0.15 ),
   /* 105 */ (    -2.0,     1.12,     0.45 ),
   /* 106 */ (   -1.12,      2.0,     0.45 ),
   /* 107 */ (     0.0,      2.0,     0.45 ),
   /* 108 */ (    -1.5,     0.84,    0.225 ),
   /* 109 */ (   -0.84,      1.5,    0.225 ),
   /* 110 */ (     0.0,      1.5,    0.225 ),
   /* 111 */ (    -1.5,     0.84,     0.15 ),
   /* 112 */ (   -0.84,      1.5,     0.15 ),
   /* 113 */ (     0.0,      1.5,     0.15 ),
   /* 114 */ (    1.12,      2.0,     0.45 ),
   /* 115 */ (     2.0,     1.12,     0.45 ),
   /* 116 */ (    0.84,      1.5,    0.225 ),
   /* 117 */ (     1.5,     0.84,    0.225 ),
   /* 118 */ (    0.84,      1.5,     0.15 ),
   /* 119 */ (     1.5,     0.84,     0.15 ),
   /* 120 */ (    -1.6,      0.0,    2.025 ),
   /* 121 */ (    -1.6,     -0.3,    2.025 ),
   /* 122 */ (    -1.5,     -0.3,     2.25 ),
   /* 123 */ (    -1.5,      0.0,     2.25 ),
   /* 124 */ (    -2.3,      0.0,    2.025 ),
   /* 125 */ (    -2.3,     -0.3,    2.025 ),
   /* 126 */ (    -2.5,     -0.3,     2.25 ),
   /* 127 */ (    -2.5,      0.0,     2.25 ),
   /* 128 */ (    -2.7,      0.0,    2.025 ),
   /* 129 */ (    -2.7,     -0.3,    2.025 ),
   /* 130 */ (    -3.0,     -0.3,     2.25 ),
   /* 131 */ (    -3.0,      0.0,     2.25 ),
   /* 132 */ (    -2.7,      0.0,      1.8 ),
   /* 133 */ (    -2.7,     -0.3,      1.8 ),
   /* 134 */ (    -3.0,     -0.3,      1.8 ),
   /* 135 */ (    -3.0,      0.0,      1.8 ),
   /* 136 */ (    -1.5,      0.3,     2.25 ),
   /* 137 */ (    -1.6,      0.3,    2.025 ),
   /* 138 */ (    -2.5,      0.3,     2.25 ),
   /* 139 */ (    -2.3,      0.3,    2.025 ),
   /* 140 */ (    -3.0,      0.3,     2.25 ),
   /* 141 */ (    -2.7,      0.3,    2.025 ),
   /* 142 */ (    -3.0,      0.3,      1.8 ),
   /* 143 */ (    -2.7,      0.3,      1.8 ),
   /* 144 */ (    -2.7,      0.0,    1.575 ),
   /* 145 */ (    -2.7,     -0.3,    1.575 ),
   /* 146 */ (    -3.0,     -0.3,     1.35 ),
   /* 147 */ (    -3.0,      0.0,     1.35 ),
   /* 148 */ (    -2.5,      0.0,    1.125 ),
   /* 149 */ (    -2.5,     -0.3,    1.125 ),
   /* 150 */ (   -2.65,     -0.3,   0.9375 ),
   /* 151 */ (   -2.65,      0.0,   0.9375 ),
   /* 152 */ (    -2.0,     -0.3,      0.9 ),
   /* 153 */ (    -1.9,     -0.3,      0.6 ),
   /* 154 */ (    -1.9,      0.0,      0.6 ),
   /* 155 */ (    -3.0,      0.3,     1.35 ),
   /* 156 */ (    -2.7,      0.3,    1.575 ),
   /* 157 */ (   -2.65,      0.3,   0.9375 ),
   /* 158 */ (    -2.5,      0.3,    1.125 ),
   /* 159 */ (    -1.9,      0.3,      0.6 ),
   /* 160 */ (    -2.0,     -0.3,      0.9 ),
   /* 161 */ (     1.7,      0.0,    1.425 ),
   /* 162 */ (     1.7,    -0.66,    1.425 ),
   /* 163 */ (     1.7,    -0.66,      0.6 ),
   /* 164 */ (     1.7,      0.0,      0.6 ),
   /* 165 */ (     2.6,      0.0,    1.425 ),
   /* 166 */ (     2.6,    -0.66,    1.425 ),
   /* 167 */ (     3.1,    -0.66,    0.825 ),
   /* 168 */ (     3.1,      0.0,    0.825 ),
   /* 169 */ (     2.3,      0.0,      2.1 ),
   /* 170 */ (     2.3,    -0.25,      2.1 ),
   /* 171 */ (     2.4,    -0.25,    2.025 ),
   /* 172 */ (     2.4,      0.0,    2.025 ),
   /* 173 */ (     2.7,      0.0,      2.4 ),
   /* 174 */ (     2.7,    -0.25,      2.4 ),
   /* 175 */ (     3.3,    -0.25,      2.4 ),
   /* 176 */ (     3.3,      0.0,      2.4 ),
   /* 177 */ (     1.7,     0.66,      0.6 ),
   /* 178 */ (     1.7,     0.66,    1.425 ),
   /* 179 */ (     3.1,     0.66,    0.825 ),
   /* 180 */ (     2.6,     0.66,    1.425 ),
   /* 181 */ (     2.4,     0.25,    2.025 ),
   /* 182 */ (     2.3,     0.25,      2.1 ),
   /* 183 */ (     3.3,     0.25,      2.4 ),
   /* 184 */ (     2.7,     0.25,      2.4 ),
   /* 185 */ (     2.8,      0.0,    2.475 ),
   /* 186 */ (     2.8,    -0.25,    2.475 ),
   /* 187 */ (   3.525,    -0.25,  2.49375 ),
   /* 188 */ (   3.525,      0.0,  2.49375 ),
   /* 189 */ (     2.9,      0.0,    2.475 ),
   /* 190 */ (     2.9,    -0.15,    2.475 ),
   /* 191 */ (    3.45,    -0.15,   2.5125 ),
   /* 192 */ (    3.45,      0.0,   2.5125 ),
   /* 193 */ (     2.8,      0.0,      2.4 ),
   /* 194 */ (     2.8,    -0.15,      2.4 ),
   /* 195 */ (     3.2,    -0.15,      2.4 ),
   /* 196 */ (     3.2,      0.0,      2.4 ),
   /* 197 */ (   3.525,     0.25,  2.49375 ),
   /* 198 */ (     2.8,     0.25,    2.475 ),
   /* 199 */ (    3.45,     0.15,   2.5125 ),
   /* 200 */ (     2.9,     0.15,    2.475 ),
   /* 201 */ (     3.2,     0.15,      2.4 ),
   /* 202 */ (     2.8,     0.15,      2.4 ),
   /* 203 */ (     0.0,      0.0,     3.15 ),
   /* 204 */ (     0.0,   -0.002,     3.15 ),
   /* 205 */ (   0.002,      0.0,     3.15 ),
   /* 206 */ (     0.8,      0.0,     3.15 ),
   /* 207 */ (     0.8,    -0.45,     3.15 ),
   /* 208 */ (    0.45,     -0.8,     3.15 ),
   /* 209 */ (     0.0,     -0.8,     3.15 ),
   /* 210 */ (     0.0,      0.0,     2.85 ),
   /* 211 */ (     0.2,      0.0,      2.7 ),
   /* 212 */ (     0.2,   -0.112,      2.7 ),
   /* 213 */ (   0.112,     -0.2,      2.7 ),
   /* 214 */ (     0.0,     -0.2,      2.7 ),
   /* 215 */ (  -0.002,      0.0,     3.15 ),
   /* 216 */ (   -0.45,     -0.8,     3.15 ),
   /* 217 */ (    -0.8,    -0.45,     3.15 ),
   /* 218 */ (    -0.8,      0.0,     3.15 ),
   /* 219 */ (  -0.112,     -0.2,      2.7 ),
   /* 220 */ (    -0.2,   -0.112,      2.7 ),
   /* 221 */ (    -0.2,      0.0,      2.7 ),
   /* 222 */ (     0.0,    0.002,     3.15 ),
   /* 223 */ (    -0.8,     0.45,     3.15 ),
   /* 224 */ (   -0.45,      0.8,     3.15 ),
   /* 225 */ (     0.0,      0.8,     3.15 ),
   /* 226 */ (    -0.2,    0.112,      2.7 ),
   /* 227 */ (  -0.112,      0.2,      2.7 ),
   /* 228 */ (     0.0,      0.2,      2.7 ),
   /* 229 */ (    0.45,      0.8,     3.15 ),
   /* 230 */ (     0.8,     0.45,     3.15 ),
   /* 231 */ (   0.112,      0.2,      2.7 ),
   /* 232 */ (     0.2,    0.112,      2.7 ),
   /* 233 */ (     0.4,      0.0,     2.55 ),
   /* 234 */ (     0.4,   -0.224,     2.55 ),
   /* 235 */ (   0.224,     -0.4,     2.55 ),
   /* 236 */ (     0.0,     -0.4,     2.55 ),
   /* 237 */ (     1.3,      0.0,     2.55 ),
   /* 238 */ (     1.3,   -0.728,     2.55 ),
   /* 239 */ (   0.728,     -1.3,     2.55 ),
   /* 240 */ (     0.0,     -1.3,     2.55 ),
   /* 241 */ (     1.3,      0.0,      2.4 ),
   /* 242 */ (     1.3,   -0.728,      2.4 ),
   /* 243 */ (   0.728,     -1.3,      2.4 ),
   /* 244 */ (     0.0,     -1.3,      2.4 ),
   /* 245 */ (  -0.224,     -0.4,     2.55 ),
   /* 246 */ (    -0.4,   -0.224,     2.55 ),
   /* 247 */ (    -0.4,      0.0,     2.55 ),
   /* 248 */ (  -0.728,     -1.3,     2.55 ),
   /* 249 */ (    -1.3,   -0.728,     2.55 ),
   /* 250 */ (    -1.3,      0.0,     2.55 ),
   /* 251 */ (  -0.728,     -1.3,      2.4 ),
   /* 252 */ (    -1.3,   -0.728,      2.4 ),
   /* 253 */ (    -1.3,      0.0,      2.4 ),
   /* 254 */ (    -0.4,    0.224,     2.55 ),
   /* 255 */ (  -0.224,      0.4,     2.55 ),
   /* 256 */ (     0.0,      0.4,     2.55 ),
   /* 257 */ (    -1.3,    0.728,     2.55 ),
   /* 258 */ (  -0.728,      1.3,     2.55 ),
   /* 259 */ (     0.0,      1.3,     2.55 ),
   /* 260 */ (    -1.3,    0.728,      2.4 ),
   /* 261 */ (  -0.728,      1.3,      2.4 ),
   /* 262 */ (     0.0,      1.3,      2.4 ),
   /* 263 */ (   0.224,      0.4,     2.55 ),
   /* 264 */ (     0.4,    0.224,     2.55 ),
   /* 265 */ (   0.728,      1.3,     2.55 ),
   /* 266 */ (     1.3,    0.728,     2.55 ),
   /* 267 */ (   0.728,      1.3,      2.4 ),
   /* 268 */ (     1.3,    0.728,      2.4 ),
   /* 269 */ (     0.0,      0.0,      0.0 ),
   /* 270 */ (     1.5,      0.0,     0.15 ),
   /* 271 */ (     1.5,     0.84,     0.15 ),
   /* 272 */ (    0.84,      1.5,     0.15 ),
   /* 273 */ (     0.0,      1.5,     0.15 ),
   /* 274 */ (     1.5,      0.0,    0.075 ),
   /* 275 */ (     1.5,     0.84,    0.075 ),
   /* 276 */ (    0.84,      1.5,    0.075 ),
   /* 277 */ (     0.0,      1.5,    0.075 ),
   /* 278 */ (   1.425,      0.0,      0.0 ),
   /* 279 */ (   1.425,    0.798,      0.0 ),
   /* 280 */ (   0.798,    1.425,      0.0 ),
   /* 281 */ (     0.0,    1.425,      0.0 ),
   /* 282 */ (   -0.84,      1.5,     0.15 ),
   /* 283 */ (    -1.5,     0.84,     0.15 ),
   /* 284 */ (    -1.5,      0.0,     0.15 ),
   /* 285 */ (   -0.84,      1.5,    0.075 ),
   /* 286 */ (    -1.5,     0.84,    0.075 ),
   /* 287 */ (    -1.5,      0.0,    0.075 ),
   /* 288 */ (  -0.798,    1.425,      0.0 ),
   /* 289 */ (  -1.425,    0.798,      0.0 ),
   /* 290 */ (  -1.425,      0.0,      0.0 ),
   /* 291 */ (    -1.5,    -0.84,     0.15 ),
   /* 292 */ (   -0.84,     -1.5,     0.15 ),
   /* 293 */ (     0.0,     -1.5,     0.15 ),
   /* 294 */ (    -1.5,    -0.84,    0.075 ),
   /* 295 */ (   -0.84,     -1.5,    0.075 ),
   /* 296 */ (     0.0,     -1.5,    0.075 ),
   /* 297 */ (  -1.425,   -0.798,      0.0 ),
   /* 298 */ (  -0.798,   -1.425,      0.0 ),
   /* 299 */ (     0.0,   -1.425,      0.0 ),
   /* 300 */ (    0.84,     -1.5,     0.15 ),
   /* 301 */ (     1.5,    -0.84,     0.15 ),
   /* 302 */ (    0.84,     -1.5,    0.075 ),
   /* 303 */ (     1.5,    -0.84,    0.075 ),
   /* 304 */ (   0.798,   -1.425,      0.0 ),
   /* 305 */ (   1.425,   -0.798,      0.0 )
};

TqInt CqTeapot::m_Teapot[32*16] = {
/* rim */
   /*  0 */   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
   /*  1 */   3,  16,  17,  18,   7,  19,  20,  21,  11,  22,  23,  24,  15,  25,  26,  27,
   /*  2 */  18,  28,  29,  30,  21,  31,  32,  33,  24,  34,  35,  36,  27,  37,  38,  39,
   /*  3 */  30,  40,  41,   0,  33,  42,  43,   4,  36,  44,  45,   8,  39,  46,  47,  12,
/* body */
   /*  4 */  12,  13,  14,  15,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,
   /*  5 */  15,  25,  26,  27,  51,  60,  61,  62,  55,  63,  64,  65,  59,  66,  67,  68,
   /*  6 */  27,  37,  38,  39,  62,  69,  70,  71,  65,  72,  73,  74,  68,  75,  76,  77,
   /*  7 */  39,  46,  47,  12,  71,  78,  79,  48,  74,  80,  81,  52,  77,  82,  83,  56,
   /*  8 */  56,  57,  58,  59,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
   /*  9 */  59,  66,  67,  68,  87,  96,  97,  98,  91,  99, 100, 101,  95, 102, 103, 104,
   /* 10 */  68,  75,  76,  77,  98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113,
   /* 11 */  77,  82,  83,  56, 107, 114, 115,  84, 110, 116, 117,  88, 113, 118, 119,  92,
/* handle */
   /* 12 */ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
   /* 13 */ 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132,
   /* 14 */ 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151,  68, 152, 153, 154,
   /* 15 */ 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160,  68,
/* spout */
   /* 16 */ 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
   /* 17 */ 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173,
   /* 18 */ 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
   /* 19 */ 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193,
/* lid */
   /* 20 */ 203, 203, 203, 203, 206, 207, 208, 209, 210, 210, 210, 210, 211, 212, 213, 214,
   /* 21 */ 203, 203, 203, 203, 209, 216, 217, 218, 210, 210, 210, 210, 214, 219, 220, 221,
   /* 22 */ 203, 203, 203, 203, 218, 223, 224, 225, 210, 210, 210, 210, 221, 226, 227, 228,
   /* 23 */ 203, 203, 203, 203, 225, 229, 230, 206, 210, 210, 210, 210, 228, 231, 232, 211,
   /* 24 */ 211, 212, 213, 214, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
   /* 25 */ 214, 219, 220, 221, 236, 245, 246, 247, 240, 248, 249, 250, 244, 251, 252, 253,
   /* 26 */ 221, 226, 227, 228, 247, 254, 255, 256, 250, 257, 258, 259, 253, 260, 261, 262,
   /* 27 */ 228, 231, 232, 211, 256, 263, 264, 233, 259, 265, 266, 237, 262, 267, 268, 241,
/* bottom (not on original teapot) prman 3.5 uses the original */
   /* 28 */ 269, 269, 269, 269, 278, 279, 280, 281, 274, 275, 276, 277, 270, 271, 272, 273,
   /* 29 */ 269, 269, 269, 269, 281, 288, 289, 290, 277, 285, 286, 287, 273, 282, 283, 284,
   /* 30 */ 269, 269, 269, 269, 290, 297, 298, 299, 287, 294, 295, 296, 284, 291, 292, 293,
   /* 31 */ 269, 269, 269, 269, 299, 304, 305, 278, 296, 302, 303, 274, 293, 300, 301, 270,
};


END_NAMESPACE(Aqsis)
//---------------------------------------------------------------------
